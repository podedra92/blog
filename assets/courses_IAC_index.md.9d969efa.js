import{_ as e,o as t,c as a,U as r}from"./chunks/framework.dab3cab5.js";const o="/blog/assets/sup.39ebd74b.gif",i="/blog/assets/drift.5ccd87f8.gif",g=JSON.parse('{"title":"IaC","description":"","frontmatter":{"title":"IaC","tags":"IaC"},"headers":[],"relativePath":"courses/IAC/index.md"}'),s={name:"courses/IAC/index.md"},n=r('<h1 id="infrastructure-as-code" tabindex="-1">Infrastructure as Code <a class="header-anchor" href="#infrastructure-as-code" aria-label="Permalink to &quot;Infrastructure as Code&quot;">‚Äã</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">‚Äã</a></h2><p>We&#39;re going attempt to cover Infrastructure as Code, covering core concepts, provisioning and testing of cloud infrastructure.<br> We&#39;ll split this by popular tools and those I&#39;ve used historically.</p><p>There will be an attempt to add to and improve this over time, and documents will be supplemented with code as well.</p><h2 id="what-is-it" tabindex="-1">What is it? <a class="header-anchor" href="#what-is-it" aria-label="Permalink to &quot;What is it?&quot;">‚Äã</a></h2><p>I assumed everyone has moved to the cloud years ago, but there are still many companies new to, or migrating from On-Prem to the cloud.</p><p>So if you&#39;re looking at cloud resources, and clicking deploy on the Azure or AWS portal, to you I&#39;d say stop!</p><p>Its never too early or too late to start with IaC (Infrastructure as Code), why?</p><p>Just like an architect would draw up blueprints for buildings or cities, code can be used to define the resources and configurations that make up your infrastructure.</p><p>It makes it easier to deploy and manage complex systems, changes are made programmatically and following good practice you end up with consistent, repeatable and traceable releases.</p><p>So who or what builds the plans, thats where tools like Pulumi or Terraform come into the scene.</p><p><img src="'+o+'" alt="sup"></p><h2 id="concepts" tabindex="-1">Concepts <a class="header-anchor" href="#concepts" aria-label="Permalink to &quot;Concepts&quot;">‚Äã</a></h2><h3 id="declarative-vs-imperative" tabindex="-1">Declarative vs. Imperative <a class="header-anchor" href="#declarative-vs-imperative" aria-label="Permalink to &quot;Declarative vs. Imperative&quot;">‚Äã</a></h3><p>Declarative describes the desired end state of the infrastructure, by defining the resources and their configurations, while imperative describes the steps/commands required to reach that state.</p><p>With the declarative approach, we let the tools do a lot of the work, they compare desired state to actual (or last known state) in order to identify the actions it needs to carry out to create your grand vision.</p><p>With the imperative approach, we&#39;d need to actually define the commands in order to create our desired state, whether it be set of CLI commands or api calls.</p><h3 id="drift" tabindex="-1">Drift <a class="header-anchor" href="#drift" aria-label="Permalink to &quot;Drift&quot;">‚Äã</a></h3><p><strong>And no, not that, we aren&#39;t in a field that interesting!</strong></p><p><img src="'+i+'" alt="drift"></p><p>Infrastructure drift occurs when the actual state of infrastructure differs from its intended state defined in IaC.<br>Drift can be caused by manual intervention or changes made outside of the IaC process, which either has or will lead to inconsistencies and errors.</p><h3 id="state" tabindex="-1">State <a class="header-anchor" href="#state" aria-label="Permalink to &quot;State&quot;">‚Äã</a></h3><p>We referred to state several times, and its used to describe the resources and its configurations. Well IaC tools commonly store and refer to a state file, it represents the current (or last applied) state of infrastructure as deployed and configured by the chosen tool.<br> The state file is used to track changes, detect drift, and manage infrastructure updates.</p><h3 id="idempotency" tabindex="-1">Idempotency <a class="header-anchor" href="#idempotency" aria-label="Permalink to &quot;Idempotency&quot;">‚Äã</a></h3><p>An idempotent system is one that can be run multiple times with the same result.<br> IaC tools all aim to be idempotent, so ran multiple times without causing unintended changes to infrastructure.</p><p>And no I can&#39;t say the word either....</p><h3 id="testing" tabindex="-1">Testing <a class="header-anchor" href="#testing" aria-label="Permalink to &quot;Testing&quot;">‚Äã</a></h3><p>I&#39;m not going to explain testing, but a note IaC can be tested like any other code, so include unit tests, integration tests, security scans etc.<br></p><h3 id="cloud-providers" tabindex="-1">Cloud Providers <a class="header-anchor" href="#cloud-providers" aria-label="Permalink to &quot;Cloud Providers&quot;">‚Äã</a></h3><p>IaC can be used to manage infrastructure in various cloud providers such as AWS, Azure, and Google Cloud. This allows for multi-cloud environments to be managed consistently and efficiently.</p><h2 id="closing" tabindex="-1">Closing <a class="header-anchor" href="#closing" aria-label="Permalink to &quot;Closing&quot;">‚Äã</a></h2><p>I think thats all for an introduction grab a coffee and we&#39;ll run through some good practices next üòÅ</p>',32),d=[n];function c(l,u,h,p,m,f){return t(),a("div",null,d)}const v=e(s,[["render",c]]);export{g as __pageData,v as default};
